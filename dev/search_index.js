var documenterSearchIndex = {"docs":
[{"location":"InstanceFileReader/index.html#Instance-Files-Reader","page":"Instance File Reader","title":"Instance Files Reader","text":"","category":"section"},{"location":"InstanceFileReader/index.html","page":"Instance File Reader","title":"Instance File Reader","text":"Contains methods for reading instances stored in text files. Types of instances include: graphs, set cover problem and directed and undirected Steiner tree problem.","category":"page"},{"location":"InstanceFileReader/index.html","page":"Instance File Reader","title":"Instance File Reader","text":"CurrentModule = VKSetCovers","category":"page"},{"location":"InstanceFileReader/index.html","page":"Instance File Reader","title":"Instance File Reader","text":"create_graph\nread_graph_from_mtx_file\nget_graph_from_mtx_file\nread_set_cover_instance_from_file\nget_set_cover_instance_from_file\nread_undirected_steiner_tree_instance_from_file\nread_directed_steiner_tree_instance_from_file","category":"page"},{"location":"InstanceFileReader/index.html#VKSetCovers.create_graph","page":"Instance File Reader","title":"VKSetCovers.create_graph","text":"Create an object of type graphs.Graph given the number of vertices and the list of edges.\n\nParameters\n\n- num_verts::Int32 - number of vertices in the graph.\n- edges::Vector{Tuple{Int32, Int32}} - edges of the graph.\n\nReturns\n\n- ::Graphs.Graph - a Graphs.Graph object representing the graph.\n\n\n\n\n\n","category":"function"},{"location":"InstanceFileReader/index.html#VKSetCovers.read_graph_from_mtx_file","page":"Instance File Reader","title":"VKSetCovers.read_graph_from_mtx_file","text":"Reads a graph stored in .mxt format in the given file.\n\nParameters\n\n- input_file::String - string with the file path.\n\nReturns\n\n- num_verts::Int32 - number of vertices in the graph.\n- num_edges::Int32 - number of edges in the graph.\n- edges::Vector{Tuple{Int32, Int32}} - edges of the graph.\n\n\n\n\n\n","category":"function"},{"location":"InstanceFileReader/index.html#VKSetCovers.get_graph_from_mtx_file","page":"Instance File Reader","title":"VKSetCovers.get_graph_from_mtx_file","text":"Returns an object of type Graphs.Graph representing the graph stored in the given .mtx format file.\n\nParameters\n\n- input_file::String - string with the file path.\n\nReturns\n\n- ::Graphs.Graph - a Graphs.Graph object representing the graph.\n\n\n\n\n\n","category":"function"},{"location":"InstanceFileReader/index.html#VKSetCovers.read_set_cover_instance_from_file","page":"Instance File Reader","title":"VKSetCovers.read_set_cover_instance_from_file","text":"Reads a set covering problem data from the given file.\n\nParameters\n\n- input_file::String - string with the file path.\n\nReturns\n\n- num_ineqs::Int32 - number of inequalities in SCP instance.\n- num_vars::Int32 - number of variables in SCP instance.\n- var_spanned_ineqs::Vector{Vector{Int32}} - the set of inequalities covered by each variable.\n- var_costs::Vector{Int32} - the objective value cost of each variable.\n\n\n\n\n\n","category":"function"},{"location":"InstanceFileReader/index.html#VKSetCovers.get_set_cover_instance_from_file","page":"Instance File Reader","title":"VKSetCovers.get_set_cover_instance_from_file","text":"Returns an object of type SetCoverInstance containing the data of the given set cover instance.\n\nParameters\n\n- input_file::String - string with the file path.\n\nReturns\n\n- ::SetCoverInstance - object with SCP instance data.\n\n\n\n\n\n","category":"function"},{"location":"InstanceFileReader/index.html#VKSetCovers.read_undirected_steiner_tree_instance_from_file","page":"Instance File Reader","title":"VKSetCovers.read_undirected_steiner_tree_instance_from_file","text":"Reads the data of the undirected Steiner tree problem instance in the given file.\n\nThe data corresponds to: graph vertices and edges, edge weights and terminal vertices.\n\nParameters\n\n- input_file::String - string with the file path.\n\nReturns\n\n- num_verts::Int32 - number of vertices in the graph.\n- num_edges::Int32 - number of edges in the graph.\n- edges::Vector{Tuple{Int32, Int32}} - the edges of the graph.\n- edge_weights::Dict{Tuple{Int32, Int32}, Int32} - the weight for each edge.\n- terminal_verts::Vector{Int32} - the set of terminal vertices.\n\n\n\n\n\n","category":"function"},{"location":"InstanceFileReader/index.html#VKSetCovers.read_directed_steiner_tree_instance_from_file","page":"Instance File Reader","title":"VKSetCovers.read_directed_steiner_tree_instance_from_file","text":"Reads the data of the directed Steiner tree problem instance in the given file.\n\nThe data corresponds to: graph vertices and arcs, arc weights and terminal vertices.\n\nParameters\n\n- input_file::String - string with the file path.\n\nReturns\n\n- num_verts::Int32 - number of vertices in the digraph.\n- num_arcs::Int32 - number of arcs in the digraph.\n- edges::Vector{Tuple{Int32, Int32}} - the edges of the digraph.\n- edge_weights::Dict{Tuple{Int32, Int32}, Int32} - the weight for each arc.\n- terminal_verts::Vector{Int32} - the set of terminal vertices.\n- root::Int32 - the root vertex.\n\n\n\n\n\n","category":"function"},{"location":"index.html#VKSetCovers","page":"Home","title":"VKSetCovers","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Documentation for VKSetCovers.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = VKSetCovers","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"VKSetCovers","category":"page"},{"location":"index.html#VKSetCovers.VKSetCovers","page":"Home","title":"VKSetCovers.VKSetCovers","text":"A module that probably does something perhaps useful.\n\n\n\n\n\n","category":"module"}]
}
